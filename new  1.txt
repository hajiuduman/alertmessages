/**
 * Confirm plugin 1.0
 * This plugin is extented from JQuery confirm plugin 1.3.
 *
 * author Haji Uduman
 * date   19 March 2013
 */

/**
 * For more docs and examples visit:
 * http://nadiana.com/jquery-confirm-plugin
 * For comments, suggestions or bug reporting,
 * email me at: http://nadiana.com/contact/
 */

jQuery.fn.confirm = function(options) {
	options = jQuery.extend({
		msg: 'Are you sure?',
		stopAfter: 'never',
		eventType: 'click',
		timeout: 0,
		requireConfirmation : null,
		params : {}
	}, options);

	options.stopAfter = options.stopAfter.toLowerCase();
	if (!options.stopAfter in ['never', 'once', 'ok', 'cancel']) {
		options.stopAfter = 'never';
	}

	function format(source, params) {
		if ( arguments.length == 1 )
			return function() {
				var args = $.makeArray(arguments);
				args.unshift(source);
				return $.validator.format.apply( this, args );
			};
		if ( arguments.length > 2 && params.constructor != Array  ) {
			params = $.makeArray(arguments).slice(1);
		}
		if ( params.constructor == String ) {
			params = [ params ];
		}
		$.each(params, function(i, n) {
			source = source.replace(new RegExp("\\{" + i + "\\}", "g"), n);
		});
		return source;
	};

	// Shortcut to eventType.
	var type = options.eventType;
	return this.each(function() {
		var target = this;
		var $target = jQuery(target);
		var timer;
		if (target._handlers != undefined) {
			$target.unbind(type);
			jQuery.each(target._handlers, function() {
				$target.click(this.handler);
			});
		}
		var saveHandlers = function() {
			var events = jQuery.data(target, 'events');
			target._onClickHandlers = null;
			var onClickEvent = $target.attr("onclick");
			if(onClickEvent) {
				target._onClickHandlers = onClickEvent;
				$target.attr("onclick", null);
			}
			if (!events && target.href) {
			// No handlers but we have href
				$target.bind('click', function() {document.location = target.href});
				events = jQuery.data(target, 'events');
			} else if (!events) {
				// There are no handlers to save.
				return;
			}
			target._handlers = new Array();
			for (var i in events[type]) {
				target._handlers.push(events[type][i]);
			}
		}

		var handler = function(event) {
			if(!options.requireConfirmation || ($.isFunction(eval(options.requireConfirmation)) && eval(options.requireConfirmation).call(null) != false)) {
				options.msg = format(options.msg, options.params);
				$.msgDialog({
					optionType : OPTION_TYPE.YES_NO,
					message : options.msg,
					onNo : function () {
						options.action = true;
						if (options.timeout != 0) {
							clearTimeout(timer);
						}
						if (options.stopAfter != 'cancel' && options.stopAfter != 'once') {
							$target.one(type, handler);
						}
						$target.show();
						return false;
					},
					onClose : function () {
						if(!options.action) {
							if (options.timeout != 0) {
								clearTimeout(timer);
							}
							if (options.stopAfter != 'cancel' && options.stopAfter != 'once') {
								$target.one(type, handler);
							}
							$target.show();
						}
						options.action = false;
						return false;
					},
					onYes : function () {
						options.action = true;
						if (options.timeout != 0) {
							clearTimeout(timer);
						}
						$target.unbind(type, handler);
						$target.show();
						// Rebind the saved handlers.
						if (target._handlers != undefined) {
							jQuery.each(target._handlers, function() {
								$target.click(this.handler);
							});
						}
						if(target._onClickHandlers && $.isFunction(target._onClickHandlers)) {
							$target.attr("onclick", target._onClickHandlers);
						} else if(target._onClickHandlers) {
							eval(target._onClickHandlers);
						}
						// Trigger click event.
						$target.click();
						if (options.stopAfter != 'ok' && options.stopAfter != 'once') {
							$target.unbind(type);
							// Rebind the confirmation handler.
							$target.one(type, handler);
						}
						return false;
					}
				});
			} else {
				$target.unbind(type, handler);
				$target.show();
				// Rebind the saved handlers.
				if (target._handlers != undefined) {
					jQuery.each(target._handlers, function() {
						$target.click(this.handler);
					});
				}
				if(target._onClickHandlers && $.isFunction(target._onClickHandlers)) {
					$target.attr("onclick", target._onClickHandlers);
				}
				// Trigger click event.
				$target.click();
				if (options.stopAfter != 'ok' && options.stopAfter != 'once') {
					$target.unbind(type);
					// Rebind the confirmation handler.
					$target.one(type, handler);
				}
				return false;
			}
			if (options.timeout != 0) {
				// Set timeout
				clearTimeout(timer);
				timer = setTimeout(function() {
					$("#MSG_DIALOG_NO").click();
				}, options.timeout);
			}
			event.stopImmediatePropagation();
			return false;
		};

		saveHandlers();
		$target.unbind(type);
		target._confirm = handler
		target._confirmEvent = type;
		$target.one(type, handler);
  });
}